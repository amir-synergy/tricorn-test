// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String          @id @default(cuid())
    name          String?
    username      String?         @unique
    email         String?         @unique
    emailVerified DateTime?
    password      String?
    image         String?
    role          UserRoles       @default(USER)
    Session       Session[]
    Account       Account?
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    status UserStatuses @default(ACTIVE)

    assessments Assessments[]
}

enum UserRoles {
    ADMIN
    USER
}

enum UserStatuses {
    ACTIVE
    BLOCKED
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String  @unique
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    refresh_token_expires_in Int?
    user                     User?   @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

model Assessments {
    id String @id @default(cuid())

    userId String @db.VarChar(255)
    user   User   @relation(fields: [userId], references: [id])

    // assessmentDate  String? @db.VarChar(255)
    // propertyName    String? @db.VarChar(255)
    // propertyManager String? @db.VarChar(255)
    // propertyStreet  String? @db.VarChar(255)
    // propertyCity    String? @db.VarChar(255)
    // propertyState   String? @db.VarChar(255)
    // propertyZip     Int?    @db.Int

    status AssessmentStatus @default(DRAFT)

    responses      Responses[]
    imageResponses ImageResponses[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum AssessmentStatus {
    ACTIVE
    DRAFT
    ARCHIVED
    DELETED
}

model Documents {
    id          String   @id @default(cuid())
    title       String?  @db.VarChar(255)
    description String?  @db.Text
    url         String   @db.Text
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Sections {
    id String @id @default(cuid())

    arrangement Int
    numeration  Int?

    title       String  @db.VarChar(255)
    description String? @db.Text
    visible     Boolean @default(true)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    subSections SubSections[]
    inputs      Inputs[]
}

model SubSections {
    id        String @id @default(cuid())
    sectionId String

    arrangement Int
    numeration  Decimal? @db.Decimal(10, 1)

    title       String   @db.VarChar(255)
    description String?  @db.Text
    visible     Boolean? @default(true)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    section Sections @relation(fields: [sectionId], references: [id])
    inputs  Inputs[]
}

model Inputs {
    id String @id @default(cuid())

    sectionId String? // Nullable for Inputs related to Sections
    section   Sections? @relation(fields: [sectionId], references: [id])

    subSectionId String? // Nullable for Inputs related to SubSections
    subSection   SubSections? @relation(fields: [subSectionId], references: [id])

    arrangement Int

    title       String? @db.VarChar(255)
    description String? @db.Text
    label       String? @db.VarChar(500)

    tag         InputTags
    type        InputTypes?
    name        String      @db.VarChar(255) // For form submission
    value       String?     @db.Text // For default values
    placeholder String?     @db.VarChar(255) // For text inputs
    accept      String?     @db.VarChar(255) // For file inputs
    options     String?     @db.Text // For select options

    max       Int?
    min       Int?
    maxLength Int?
    minLength Int?

    required Boolean  @default(true) // For form validation
    multiple Boolean? // For file inputs

    pattern String? @db.VarChar(255) // For pattern regex

    visible Boolean @default(true) // For conditional visibility

    // responses Responses[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum InputTags {
    INPUT
    TEXTAREA
    SELECT
}

enum InputTypes {
    TEXT
    NUMBER
    EMAIL
    TEL
    URL
    PASSWORD
    FILE
    CHECKBOX
    RADIO
    DATE
    TIME
    DATETIME
    MONTH
    WEEK
    COLOR
    RANGE
}

model Responses {
    id Int @id @default(autoincrement())

    assessmentId String
    assessment   Assessments @relation(fields: [assessmentId], references: [id])

    // inputId String?
    // input   Inputs? @relation(fields: [inputId], references: [id])

    step  String  @db.VarChar(255) // tmp: will be replaced by sectionId or subSectionId
    name  String  @db.VarChar(255)
    value String? @db.Text

    // type  String? @db.VarChar(255)
    // group String? @db.VarChar(255)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ImageResponses {
    id Int @id @default(autoincrement())

    assessmentId String
    assessment   Assessments @relation(fields: [assessmentId], references: [id])

    // inputId String?
    // input   Inputs? @relation(fields: [inputId], references: [id])

    step     String  @db.VarChar(255) // tmp: will be replaced by sectionId or subSectionId
    name     String  @db.VarChar(255)
    fileName String  @db.VarChar(255)
    filePath String? @db.Text

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
